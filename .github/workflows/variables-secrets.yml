name: Migrate Variables and Secrets

on:
  workflow_dispatch:
    inputs:
      repository:
        description: 'Source repository'
        required: true
        type: string
      target_repo:
        description: 'Target repository'
        required: true
        type: string
      variables_data:
        description: 'Base64 encoded variables JSON'
        required: false
        type: string
      secrets_data:
        description: 'Base64 encoded secrets JSON'
        required: false
        type: string
      issue_number:
        description: 'Issue number for tracking'
        required: false
        type: string
      batch_number:
        description: 'Batch number'
        required: false
        type: string

permissions:
  contents: read
  issues: write

jobs:
  migrate-variables-secrets:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Extract repository name
        id: repo-info
        run: |
          REPO_NAME=$(basename "${{ inputs.repository }}")
          TARGET_REPO_NAME=$(basename "${{ inputs.target_repo }}")
          echo "source_name=$REPO_NAME" >> $GITHUB_OUTPUT
          echo "target_name=$TARGET_REPO_NAME" >> $GITHUB_OUTPUT
      
      - name: Report migration start
        if: inputs.issue_number != ''
        uses: actions/github-script@v8
        with:
          script: |
            const batchInfo = context.payload.inputs.batch_number ? 
              `**Batch:** ${context.payload.inputs.batch_number}` : '';
            
            const message = [
              '### 🔐 Variables/Secrets Migration Starting',
              '',
              `**Source Repository:** \`${{ steps.repo-info.outputs.source_name }}\``,
              `**Target Repository:** \`${{ steps.repo-info.outputs.target_name }}\``,
              batchInfo,
              '',
              'Migrating repository variables and creating placeholder secrets...'
            ].filter(line => line !== '').join('\n');
            
            await github.rest.issues.createComment({
              issue_number: ${{ inputs.issue_number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });

      - name: Process Variables
        id: variables
        if: inputs.variables_data != ''
        run: |
          # Decode the variables data
          VARIABLES_JSON=$(echo "${{ inputs.variables_data }}" | base64 -d)
          
          # Check if there are variables to process
          VAR_COUNT=$(echo "$VARIABLES_JSON" | jq -r 'length')
          MIGRATED_COUNT=0
          FAILED_COUNT=0
          
          if [ "$VAR_COUNT" -gt 0 ]; then
            echo "Processing $VAR_COUNT variables..."
            
            # Process each variable
            echo "$VARIABLES_JSON" | jq -c '.[]' | while read -r var; do
              VAR_NAME=$(echo "$var" | jq -r '.name')
              VAR_VALUE=$(echo "$var" | jq -r '.value')
              
              echo "Setting variable: $VAR_NAME"
              if GH_TOKEN="${{ secrets.TARGET_ADMIN_TOKEN }}" gh variable set "$VAR_NAME" \
                --body "$VAR_VALUE" \
                --repo "${{ inputs.target_repo }}"; then
                ((MIGRATED_COUNT++))
              else
                ((FAILED_COUNT++))
                echo "Failed to set variable: $VAR_NAME"
              fi
            done
            
            echo "variables_migrated=$MIGRATED_COUNT" >> $GITHUB_OUTPUT
            echo "variables_failed=$FAILED_COUNT" >> $GITHUB_OUTPUT
            echo "variables_total=$VAR_COUNT" >> $GITHUB_OUTPUT
          else
            echo "variables_migrated=0" >> $GITHUB_OUTPUT
            echo "variables_failed=0" >> $GITHUB_OUTPUT
            echo "variables_total=0" >> $GITHUB_OUTPUT
          fi

      - name: Process Secrets
        id: secrets
        if: inputs.secrets_data != ''
        run: |
          # Decode the secrets data
          SECRETS_JSON=$(echo "${{ inputs.secrets_data }}" | base64 -d)
          
          # Check if there are secrets to process
          SECRET_COUNT=$(echo "$SECRETS_JSON" | jq -r 'length')
          CREATED_COUNT=0
          FAILED_COUNT=0
          
          if [ "$SECRET_COUNT" -gt 0 ]; then
            echo "Processing $SECRET_COUNT secrets..."
            
            # Create a list of secret names for reporting
            echo "SECRET_NAMES<<EOF" >> $GITHUB_OUTPUT
            echo "$SECRETS_JSON" | jq -r '.[].name' >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            
            # Process each secret
            echo "$SECRETS_JSON" | jq -c '.[]' | while read -r secret; do
              SECRET_NAME=$(echo "$secret" | jq -r '.name')
              
              echo "Creating placeholder secret: $SECRET_NAME"
              if echo "PLACEHOLDER_UPDATE_REQUIRED_$SECRET_NAME" | \
                GH_TOKEN="${{ secrets.TARGET_ADMIN_TOKEN }}" gh secret set "$SECRET_NAME" \
                --repo "${{ inputs.target_repo }}"; then
                ((CREATED_COUNT++))
              else
                ((FAILED_COUNT++))
                echo "Failed to create secret: $SECRET_NAME"
              fi
            done
            
            echo "secrets_created=$CREATED_COUNT" >> $GITHUB_OUTPUT
            echo "secrets_failed=$FAILED_COUNT" >> $GITHUB_OUTPUT
            echo "secrets_total=$SECRET_COUNT" >> $GITHUB_OUTPUT
          else
            echo "secrets_created=0" >> $GITHUB_OUTPUT
            echo "secrets_failed=0" >> $GITHUB_OUTPUT
            echo "secrets_total=0" >> $GITHUB_OUTPUT
            echo "SECRET_NAMES=" >> $GITHUB_OUTPUT
          fi
      
      - name: Report migration completion
        if: always() && inputs.issue_number != ''
        uses: actions/github-script@v8
        with:
          script: |
            const batchInfo = context.payload.inputs.batch_number ? 
              `**Batch:** ${context.payload.inputs.batch_number}` : '';
            
            // Get counts from previous steps
            const varTotal = parseInt('${{ steps.variables.outputs.variables_total }}' || '0');
            const varMigrated = parseInt('${{ steps.variables.outputs.variables_migrated }}' || '0');
            const varFailed = parseInt('${{ steps.variables.outputs.variables_failed }}' || '0');
            
            const secTotal = parseInt('${{ steps.secrets.outputs.secrets_total }}' || '0');
            const secCreated = parseInt('${{ steps.secrets.outputs.secrets_created }}' || '0');
            const secFailed = parseInt('${{ steps.secrets.outputs.secrets_failed }}' || '0');
            
            const secretNames = `${{ steps.secrets.outputs.SECRET_NAMES }}`.split('\n').filter(n => n);
            
            // Determine overall status
            const hasFailures = varFailed > 0 || secFailed > 0;
            const icon = hasFailures ? '⚠️' : '✅';
            const status = hasFailures ? 'completed with issues' : 'completed successfully';
            
            let message = [
              `### ${icon} Variables/Secrets Migration ${status}`,
              '',
              `**Source Repository:** \`${{ steps.repo-info.outputs.source_name }}\``,
              `**Target Repository:** \`${{ steps.repo-info.outputs.target_name }}\``,
              batchInfo,
              ''
            ];
            
            if (varTotal > 0) {
              message.push(`#### 📊 Variables Migration`);
              message.push(`- Total: ${varTotal}`);
              message.push(`- ✅ Migrated: ${varMigrated}`);
              if (varFailed > 0) {
                message.push(`- ❌ Failed: ${varFailed}`);
              }
              message.push('');
            }
            
            if (secTotal > 0) {
              message.push(`#### 🔒 Secrets Migration`);
              message.push(`- Total: ${secTotal}`);
              message.push(`- ✅ Created: ${secCreated}`);
              if (secFailed > 0) {
                message.push(`- ❌ Failed: ${secFailed}`);
              }
              message.push('');
              
              if (secretNames.length > 0) {
                message.push('**⚠️ Manual Action Required - Update these secrets:**');
                secretNames.forEach(name => {
                  message.push(`- \`${name}\``);
                });
                message.push('');
              }
            }
            
            if (varTotal === 0 && secTotal === 0) {
              message.push('No variables or secrets to migrate.');
            }
            
            await github.rest.issues.createComment({
              issue_number: ${{ inputs.issue_number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message.filter(line => line !== null).join('\n')
            });